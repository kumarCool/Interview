Moq:
Moq (pronounced “Mock-you” or just “Mock”)

Moq is a very useful framework which easily mocks service calls and methods for your unit testing. 

Here MOQ is responsible for creating a proxy/fake for us and we have used setup method to set the expected results of the fake object.In order to Mock a property/method of a class, we need to mark it with virtual keyword.
 
 Interfaces are mockable by default. It comes very handy when you have contracts with you but no concrete implementation or your implementation/behavior is volatile.
 
 What is Moq ?

Moq is a third party library/framework that enables you to create the dummy class and its methods’ dummy implementation without actually creating a class with actual method implementation. Here you need to note that you need to provide the interface name for creating dummy class which will implement interface methods as dummy. This is very useful in the scenarios where you want to test the functionality of a class without implementing the other classes and their methods on which the test candidate class is dependent on.

There are several mocking frameworks to be used in testing environments such as 
NMock
RhinoMocks
FakeItEasy
Moq 
Nunit
xUnit.Net

NUnit is a Unit Testing framework for all .NET languages and brings in a xUnit style of testing. 
Exmaples:
http://www.dotnetcurry.com/aspnet-mvc/1110/testing-mvc-controller-using-nunit
http://www.dotnetcurry.com/aspnet-mvc/1155/aspnet-mvc-repository-pattern-perform-database-operations
 
Install-Package Moq 
 
using Moq;
using Moq.Matchers;
http://willemdejong.net/blog/using-moq-in-a-visual-studio-test-project



Nunit:

IOC

Dependency injection is one way to implement inversion of control.To understand dependency injection please refer Dependency Injection in .NET

Dependency injection injects the dependencies of a class at runtime.This creates a lose coupling
 between the classes as changes in one class does not impact the other dependent classes
DI Containers:  to automatically inject dependencies we use a Dependency Injection(DI) container.We can also inject the dependencies manually but using a DI container provides the following benefits

Automatic Dependency Resolution When dependendencies are managed by the container there are less chances of error.Suppose if our application has a lot of dependencies then injecting those dependencies is also difficult to manage if we are injecting them without a DI container.

Decouples the client from the dependency If the client is directly injecting the dependency then client code is aware of the class dependencies.This tight coupling can be a problem if tomorrow the dependencies of the class changes.

Suppose if a X has a dependency on Y then without the container it is the responsibility of the client to create and inject the instance of class Y.

********************MVC********************
http://www.codeproject.com/Articles/644605/CRUD-Operations-Using-the-Repository-Pattern-in-MV


****************** MAngo DB*****************
http://www.codeproject.com/Articles/1071823/RESTful-WEB-API-for-CRUD-operations-in-MongoDB

Commands
%windir%\system32\inetsrv\
C:\Windows\system32\drivers\etc

Nuget 
Automapper
Automapper is a simple reusable component which helps you to copy data from object type to other. 
If you wish to get automapper


Artilces
IIS
http://www.codeproject.com/Articles/42158/steps-to-increase-bandwidth-performance-for-ASPX

Dependency Injection (DI, wikipedia) is a design pattern that reduces hard-coded dependencies between your classes by injecting these dependencies at run-time, instead of during design-time. Technically, Dependency Injection is a mechanism that allows the implementation of another, more high-level, design pattern called Inversion of Control (IoC, wikipedia). The purpose of both patterns is to reduce hard-coded dependencies (or 'coupling') between your classes.
Unity
Ninject



There are few popular .NET dependency injection containers such as:
•Castle Windsor
•StructureMap
•Autofac
•Unity
•Ninject
•Puzzle.NFactory

Install-Package StructureMap.MVC5 



BaseController 

 @using(Ajax.BeginForm("CreateStudent", "GetStudents",    
     new AjaxOptions    
     {    
     HttpMethod = "Post", UpdateTargetId = "dvCategoryResults"    
     }))    
     {   

Remove the HTTP Verbs
 @Html.ActionLink("Download file", "DownloadFile", "FileUpload", new { filename = "ExcelFile" },null)


https://gridmvc.codeplex.com/
http://mvcgrid.net/
http://demo.aspnetawesome.com/GridCrudDemo

Grid.
MvcContrib

MvcContrib is open source project to add extra feature to asp.net MVC grid control. MvcContrib support Portable Area , Fluent Html helpers, grid and input builders. 

telerik asp.net MVC

Telerik Extensions for ASP.NET MVC is a lightweight framework helping you build rich user interfaces for ASP.NET MVC while enhancing your productivity (only few features available in free version).



datatables

Datatables is Table plugin for jquery. This plugin have huge range of varieties. It is a highly flexible tool, based upon the foundations of progressive enhancement, and will add advanced interaction controls to any HTML table. 


jQuery ASP.Net MVC Controls

This is complete list of asp.net MVC control based on jquery and jqgrid framework. Ajax paging, Editing, Sub-grid, Batch update, Standard widgets such as datepicker, and many more - all with full .Net Fluent-like configuration and intelliSense support.Razor View-Engine support, Custom pager support, Full Search & Ordering support (including multiple filters), Cleaner Controller grid Configuration and Grid toolbar buttons support.

SlickGrid

SlickGrid is advance Javascript grid/ spreadsheet components. You will enjoy features like Extremely fast rendering speed, Supports jQuery UI Themes, Background post-rendering for richer cells, Configurable & customizable, Full keyboard navigation, Column resize/reorder/show/hide, Column auto sizing & force-fit, Pluggable cell formatters & editors, Support for editing and creating new rows., Grouping, filtering, custom aggregators, and more!

Grid.MVC

Grid.Mvc adds functionality for creating GridView controls in your ASP.NET MVC 3/4 web application. It is a component that allows you easy construction of HTML tables for displaying, paging, filtering and sorting data from a collection of your Model objects.

ParamQuery grid 

ParamQuery grid is open source jQuery grid plugin for displaying and manipulating tabular data in rich Ajax applications. You will get huge features like Multiple row and cell selections with full customization, Hiding / Showing columns, Resizable columns and grid, Grouping of columns, Freeze any number of Columns like Excel, Summary of Rows, CRUD (Create, Read, Update, Delete), Search / Filter and more...

jqGrid

jqGrid is an Ajax-enabled JavaScript control that provides solutions for representing and manipulating tabular data on the web. Since the grid is a client-side solution loading data dynamically through Ajax callbacks, it can be integrated with any server-side technology, including PHP, ASP, Java Servlets, JSP, ColdFusion, and Perl.


Code based Asp.net MVC Grid

If you are looking for custom code based asp.net MVC grid which is easily customized as per your requirement then this open source asp.net MVC grid is best option.


InGrid

Ingrid is an unobtrusive jQuery component that adds datagrid behaviors (column resizing, paging, sorting, row and column styling, and more) to your tables. Checkout example page for more description.

jqwidgets jqxGrid

jqxGrid is powerful datagrid widget built entirely with open web standards. It offers rich functionality, easy to use APIs and works across devices and browsers. jqxGrid delivers advanced data visualization features and built-in support for client and server-side paging, editing, sorting and filtering.

Ignite UI Grid

Ignite UI grid is one of best jquery based Grid. You will get unlimited features and our personal recommendation to use this asp.net MVC gridview.

*****************EF**********************
Entity Data Model or EDM consists of 3 parts
Conceptual Model Consists of classes which represents our domain model
Storage Model Consists of database objects such as tables,views and stored procedures
Mapping Information  Maps the conceptual model with the domain model.It is because of this mapping information that Entity Framework is able to identify how to represent the model classes in the database

EF Comman code:
using (var context = new SchoolDBEntities())
{
    var studentList = context.Students.ToList<Student>();

    //Perform create operation
    context.Students.Add(new Student() { StudentName = "New Student" });

    //Perform Update operation
    Student studentToUpdate = studentList.Where(s => s.StudentName == "student1").FirstOrDefault<Student>();
    studentToUpdate.StudentName = "Edited student1";

    //Perform delete operation
    context.Students.Remove(studentList.ElementAt<Student>(0));

    //Execute Inser, Update & Delete queries in the database
    context.SaveChanges();
} 

Repositary
class Student
{
public string Name { get; set; }
public string Address { get; set; }
public string RollNo { get; set; }
public string Class { get; set; }
}

interface IRepository
{
void Insert(Student student);
void Delete(Student student);
void Update(Student student);
Student GetById(Student RollNo);
IQueryable<Student> FetchAll();
}


class SQLRepository : IRepository
{
 
public void Insert(Student student)
{
//Insert logic in sql server db
}
 
public void Delete(Student student)
{
//logic to delete in sql server db
}
 
public void Update(Student student)
{
//logic to update in sql server db
}
 
public IQueryable<Student> GetAll()
{
//logic to Retreive from sql server db
}
 
public Student GetById(Student RollNo)
{
//logic to Retreive by id from sql server db
}
}


class Student
{
public string Name { get; set; }
public string Address { get; set; }
public string RollNo { get; set; }
public string Class { get; set; }
private IRepository _respository;
 
public Student(IRepository repository)
{
_repository = respository;
}
 
public bool AddStudent(Student student)
{
bool isSaved=_respository.Save(student);
return isSaved;
}
 
}


[HttpPost]
[ValidateAntiForgeryToken]
public ActionResult Create([Bind(Include = "LastName, FirstMidName, EnrollmentDate")]Student student)
{
    try
    {
        if (ModelState.IsValid)
        {
            db.Students.Add(student);
            db.SaveChanges();
            return RedirectToAction("Index");
        }
    }
    catch (DataException /* dex */)
    {
        //Log the error (uncomment dex variable name and add a line here to write a log.
        ModelState.AddModelError("", "Unable to save changes. Try again, and if the problem persists see your system administrator.");
    }
    return View(student);
}

public ActionResult Details(int? id)
{
    if (id == null)
    {
        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
    }
    Student student = db.Students.Find(id);
    if (student == null)
    {
        return HttpNotFound();
    }
    return View(student);
}


[HttpPost]
[ValidateAntiForgeryToken]
public ActionResult Delete(int id)
{
    try
    {
        Student student = db.Students.Find(id);
        db.Students.Remove(student);
        db.SaveChanges();
    }
    catch (DataException/* dex */)
    {
        //Log the error (uncomment dex variable name and add a line here to write a log.
        return RedirectToAction("Delete", new { id = id, saveChangesError = true });
    }
    return RedirectToAction("Index");
}


http://www.codeproject.com/Tips/869553/CRUD-operation-with-Entity-Framework-Database-Fi
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using OrganizationDetails.Models;

namespace OrganizationDetails.Controllers
{
    public class EmployeeController : Controller
    {
        private OrganizationEmployeeEntities db = new OrganizationEmployeeEntities();

        // GET: /Employee/
        public ActionResult Index()
        {
            return View(db.Employees.ToList());
        }

        // GET: /Employee/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Employee employee = db.Employees.Find(id);
            if (employee == null)
            {
                return HttpNotFound();
            }
            return View(employee);
        }

        // GET: /Employee/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: /Employee/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include="EmployeeID,LastName,FirstName,JoiningDate")] Employee employee)
        {
            if (ModelState.IsValid)
            {
                db.Employees.Add(employee);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            return View(employee);
        }

        // GET: /Employee/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Employee employee = db.Employees.Find(id);
            if (employee == null)
            {
                return HttpNotFound();
            }
            return View(employee);
        }

        // POST: /Employee/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include="EmployeeID,LastName,FirstName,JoiningDate")] Employee employee)
        {
            if (ModelState.IsValid)
            {
                db.Entry(employee).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(employee);
        }

        // GET: /Employee/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Employee employee = db.Employees.Find(id);
            if (employee == null)
            {
                return HttpNotFound();
            }
            return View(employee);
        }

        // POST: /Employee/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Employee employee = db.Employees.Find(id);
            db.Employees.Remove(employee);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}

